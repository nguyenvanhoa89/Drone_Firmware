analysis.r
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_data <- read.csv('processed_pulse_data.csv')
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
# Calculate linear regression
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
# A basic scatter plot in log scale, to display the distributions
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
# A plot of averages
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
# A plot of all values where the gain is set separately
ggplot(subset(gain_data, vga_gain == 0), aes(lna_gain, rssi_db)) + geom_point() +
geom_point(data = subset(gain_data, lna_gain == 0), aes(vga_gain, rssi_db), color = "Red") + theme_classic()
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
install.packages("dyplyr","tidyr")
install.packages("ggplot2")
install.packages(c("shiny", "rmarkdown", "xtable", "markdown"))
install.packages("dplyr", "stringr", "lubridate", "ggvis", "rgl","htmlwidgets")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
# Calculate linear regression
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
# A basic scatter plot in log scale, to display the distributions
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red")
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
# A plot of averages
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
# A plot of all values where the gain is set separately
ggplot(subset(gain_data, vga_gain == 0), aes(lna_gain, rssi_db)) + geom_point() +
geom_point(data = subset(gain_data, lna_gain == 0), aes(vga_gain, rssi_db), color = "Red") + theme_classic()
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
# Calculate linear regression
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
# A basic scatter plot in log scale, to display the distributions
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
# A plot of averages
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
# A plot of all values where the gain is set separately
ggplot(subset(gain_data, vga_gain == 0), aes(lna_gain, rssi_db)) + geom_point() +
geom_point(data = subset(gain_data, lna_gain == 0), aes(vga_gain, rssi_db), color = "Red") + theme_classic()
install.packages(ggvis)
install.packages("ggvis")
install.packages("stringr")
install.packages("tidyr")
install.packages("lubridate")
install.packages("tidyformat")
install.packages("rgl")
install.packages("googleVis")
install.packages("car")
install.packages("mgcv", "lme4", "randomForest", "multcomp", "vcd", "glmnet", "survival", "caret")
install.packages("mgcv")
install.packages(sp)
install.packages("sp")
install.packages("maptools")
install.packages("zoo")
install.packages("xts")
install.packages("quantmod")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install
install.packages("data.table")
install.packages()
install.packages("parallel")
install.packages("XML")
install.packages("jsonlite")
install.packages("httr")
install.packages("randomForest")
install.packages("mgcv")
install.packages("vcd")
install.packages("glmnet")
install.packages("carey")
install.packages("caret")
install.packages("multcomp")
install.packages("htmlwidgets")
install.packages("xtable")
install.packages("ggmap")
install.packages("maps")
install.packages("RODBC" "RMySQL")
install.packages("RODBC", "RMySQL")
install.packages("RODBC")
install.packages("RMySQL")
install.packages("RPostgreSQL")
install.packages("RSQLite")
install.packages("XLConnect")
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
# Calculate linear regression
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
# A basic scatter plot in log scale, to display the distributions
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
# A plot of averages
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
# A plot of all values where the gain is set separately
ggplot(subset(gain_data, vga_gain == 0), aes(lna_gain, rssi_db)) + geom_point() +
geom_point(data = subset(gain_data, lna_gain == 0), aes(vga_gain, rssi_db), color = "Red") + theme_classic()
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
View(gain_data)
View(gain_data)
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
library(ggplot2)
library(dplyr)
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
# Calculate linear regression
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
# A basic scatter plot in log scale, to display the distributions
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
View(gain_data)
View(gain_data)
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
View(gain_data_avg)
View(gain_data_avg)
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
# Calculate linear regression
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
# A basic scatter plot in log scale, to display the distributions
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
# A plot of averages
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
# A plot of all values where the gain is set separately
ggplot(subset(gain_data, vga_gain == 0), aes(lna_gain, rssi_db)) + geom_point() +
geom_point(data = subset(gain_data, lna_gain == 0), aes(vga_gain, rssi_db), color = "Red") + theme_classic()
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
# Calculate linear regression
regression = with(subset(gain_data, rssi < 0.9), lm(rssi_db ~ 0 + gain))
gain_model <- coef(regression)
# A basic scatter plot in log scale, to display the distributions
svg('gain-data-plot-1.svg', width = 6, height = 4);
ggplot(gain_data, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model, color = "red") +
xlab("Gain setting (dB)") + ylab("Actual gain (dB)") + ggtitle("Actual gain vs Selected gain") +
theme_bw()
dev.off()
# A plot of averages
svg('gain-data-plot-2.svg', width = 6, height = 4);
gain_data_avg <- summarise(group_by(gain_data, gain), rssi_db = 10 * log10(mean(rssi_norm)))
ggplot(gain_data_avg, aes(gain, rssi_db)) + geom_point() +
geom_abline(intercept = 0, slope = gain_model) + theme_bw()
dev.off()
ggplot() + geom_abline(intercept = gain_model[1], slope = gain_model[2])
# A plot of all values where the gain is set separately
ggplot(subset(gain_data, vga_gain == 0), aes(lna_gain, rssi_db)) + geom_point() +
geom_point(data = subset(gain_data, lna_gain == 0), aes(vga_gain, rssi_db), color = "Red") + theme_classic()
subset(gain_data, gain == 0)
median(with(subset(gain_data, gain == 0), rssi)
)
26*0.454
36*0.454
10 * log10(0.65/0.002343576)
3e8/(150e6)
library(ggplot2)
library(dplyr)
# Read in raw gain data
gain_data <- read.csv('processed_pulse_data.csv')
gain_data$gain <- gain_data$lna_gain + gain_data$vga_gain
gain_data$rssi_norm <- gain_data$rssi / median(with(subset(gain_data, gain == 0), rssi))
gain_data$rssi_db = 10 * log10(gain_data$rssi_norm)
View(gain_data)
View(gain_data)
